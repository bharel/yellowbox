:mod:`extras.postgresql` --- PostgreSQL Database Service
========================================================

.. module:: extras.postgresql
    :synopsis: Serving PostgreSQL database.

-------

A :class:`~service.YellowService` for running PostGreSQL DB. Runs the official PostgreSQL docker image, with
integration with ``sqlalchemy``.

.. note::

    Requires the ``postgresql`` extra. For more information, see our :ref:`installation guide <installation>`.

.. class:: PostgreSQLService(docker_client, image="postgres:latest", *, user='postgres', password='guest', \
        default_db=None, **kwargs)

    A service that runs a PostgreSQL database. Inherits from :class:`~subclasses.SingleContainerService`. Usable with
    :class:`~subclasses.RunMixin`.

    :param docker_client: The docker client to used to pull and create the Postgresql container.
    :type docker_client: :class:`docker.DockerClient<docker.client.DockerClient>`

    :param str image: The image name to create a container of.

    :param str user: The name of the default user for the database.
    :param str password: The password for the default user.

    :param str | None default_db: The name of the default database. If :data:`None`, uses the same name as the
     default user.

    :param \*\*kwargs: Additional keyword arguments passed to :class:`~subclasses.SingleContainerService`.

    Has the following additional methods:

    .. method:: external_port() -> int

        Returns the port to be used when connecting to the Postgres server.

    .. method:: local_connection_string(dialect='postgresql', driver=None, database=None)->str

        Returns an sqlalchemy connection string to the database from the localhost.

        :param str dialect: The dialect to use for the connection string.
        :param str | None driver: The driver to use for the connection string. If :data:`None`, uses the default
         driver for the dialect (psycopg2).
        :param str | None database: The database to use for the connection string. If :data:`None`, uses the default
         database.

        .. note::

            To connect from a container, see :meth:`container_connection_string` or :meth:`host_connection_string`.

    .. method:: container_connection_string(hostname, dialect='postgresql', driver=None, database=None)->str

        Returns an sqlalchemy connection string to the database from a different container.

        :param str hostname: The hostname of the container. Most commonly this is an alias of the
         PostgreSQLService within a network.
        :param str dialect: The dialect to use for the connection string.
        :param str | None driver: The driver to use for the connection string. If :data:`None`, uses the default
         driver for the dialect (psycopg2).
        :param str | None database: The database to use for the connection string. If :data:`None`, uses the default
         database.

    .. method:: host_connection_string(dialect='postgresql', driver=None, database=None)->str

        Returns an sqlalchemy connection string to the database from a child container through the docker host.

        :param str dialect: The dialect to use for the connection string.
        :param str | None driver: The driver to use for the connection string. If :data:`None`, uses the default
         driver for the dialect (psycopg2).
        :param str | None database: The database to use for the connection string. If :data:`None`, uses the default
         database.

    .. method:: engine(**kwargs) -> sqlalchemy.engine.Engine

        Returns a sqlalchemy engine to the database, using a default connection string generated by
        :meth:`local_connection_string`.

        :param \*\*kwargs: Additional keyword arguments passed to :func:`sqlalchemy.create_engine`.

    .. method:: connection(**kwargs) -> sqlalchemy.engine.Connection

        Creates an SQLAlchemy connection to the database, using a default connection string generated by
        :meth:`local_connection_string`.

        :param \*\*kwargs: Additional keyword arguments passed to :meth:`sqlalchemy.Engine.connect`.
