:mod:`extras.logstash` --- Logstash Server Emulation
=====================================================

.. module:: extras.logstash
    :synopsis: Emulating Logstash server.

-------

An emulated, lightweight server that resembles Logstash.

.. code-block::
        :caption: Example Usage

        import socket
        import time
        ls = FakeLogstashService()
        ls.start()
        # Logstash Handler internally creates this connection and sends a log.
        s = socket.create_connection((ls.local_host, ls.port))
        s.sendall(b'{"record": "value", "level": "ERROR"}\\n')
        s.close()
        time.sleep(0.01)  # Wait for service to process message
        ls.stop()
        ls.assert_logs("ERROR")
        assert ls.records[0]["record"] == "value"


.. class:: FakeLogstashService(port=0)

    Implements a fake logging service that closely resembles Logstash.

    Accepts external TCP connections, with logs received in the "json_lines"
    format.

    Inherits from :class:`~service.YellowService`.

    :param int port: Port to bind the server to. Default is random port.

    .. attribute:: records
        :type: list[dict[str, ...]]

        A list of all records received.

        Each record is a dictionary that has the same keys as expected by
        Logstash, and is generated by Python's numerous Logstash packages.

        All records have at least the following keys:

        * ``'@timestamp'``: Log timestamp in ISO-8601 format (:class:`str`).
        * ``'@version'``: Logstash format version as a string (:class:`str` always ``"1"``).
        * ``'message'``: Log message (:class:`str`).
        * ``'host'``: Host sending the message (:class:`str`).
        * ``'path'``: Path to the module writing the log (:class:`str`).
        * ``'tags'``: List of tags (:class:`list`\[:class:`str`]).
        * ``'type'``: Always ``"Logstash"``.
        * ``'level'``: An all upper-case name of the log level (:class:`str`).
        * ``'logger_name'``: Logger name (:class:`str`).
        * ``'stack_info'``: Formatted stacktrace if one exists, otherwise ``None`` (:class:`str` | :data:`None`).

        More keys may be added by the specific software sending the logs.

        You are welcome to modify, clear or iterate over this during runtime.
        New logs will be added in the order they were received.

    .. attribute:: port
        :type: int

        Dynamic port external service should connect to.

        FakeLogstashService automatically binds a free port during
        initialization unless chosen otherwise.

    .. attribute:: local_host
        :type: str

        Host to connect to from the local machine (i.e. "localhost")

    .. attribute:: container_host
        :type: str

        Host to connect to from inside containers.

    .. attribute:: encoding
        :type: str

        Encoding of the json lines received. Defaults to ``"utf-8"`` per
        specification.

        .. note::

            This attribute will be ignored if it is changed after the service is started.

    .. attribute:: delimiter
        :type: str

        Delimiter splitting between json objects. Defaults to ``b'\n'`` per
        specification.

        .. note::

            This attribute will be ignored if it is changed after the service is started.

    Has the following additional methods:

    .. method:: filter_records(level)

        Iterate over records in the given *level* or above.

        :param level: Log  level to filter by.
        :type level: :class:`str` | :class:`int`

        :return: An iterator over the valid records.
        :rtype: Iterator[dict[str, ...]]

    .. method:: assert_logs(level)

        Asserts that log messages were received in the given *level* or above.

        :param level: Log  level to check.
        :type level: :class:`str` | :class:`int`
        :raises: :exc:`AssertionError` if no logs of at least the given level were received.

        Resembles unittest's :meth:`~unittest.TestCase.assertLogs`.

    .. method:: assert_no_logs(level)

        Asserts that no log messages were received in the given *level* or above.

        :param level: Log  level to check.
        :type level: :class:`str` | :class:`int`
        :raises: :exc:`AssertionError` if any logs of at least the given level were received.

        Resembles unittest's :meth:`~unittest.TestCase.assertNoLogs`.
